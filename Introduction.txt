Group Members:
Huraira Khan 
Muhammad Kaleem 
 
Online Event Management App

#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

class Event {
private:
    string name;
    string date;
    string location;

public:
    Event(string n, string d, string l) : name(n), date(d), location(l) {}

    void display() const {
        cout << "Event: " << name << endl;
        cout << "Date: " << date << endl;
        cout << "Location: " << location << endl;
    }
};
class Ticket {
private:
    string eventName;
    string eventDate;
    string eventLocation;
    string ticketType;
    int quantity;
    double price;

public:
    Ticket(string name, string date, string location, string type, int qty, double p) 
        : eventName(name), eventDate(date), eventLocation(location), ticketType(type), quantity(qty), price(p) {}

    void displayTicketDetails() const {
        cout << "Event Name: " << eventName << endl;
        cout << "Date: " << eventDate << endl;
        cout << "Location: " << eventLocation << endl;
        cout << "Ticket Type: " << ticketType << endl;
        cout << "Quantity: " << quantity << endl;
        cout << "Total Price: $" << (price * quantity) << endl;
    }
};
class Payment {
private:
    string cardNumber;
    string cardHolderName;
    string expiryDate;
    string cvv;

public:
    Payment(string number, string holder, string expiry, string cvv) 
        : cardNumber(number), cardHolderName(holder), expiryDate(expiry), cvv(cvv) {}

    bool processPayment(double amount) {
        // Placeholder for payment processing logic
        cout << "Payment processed successfully for amount $" << amount << endl;
        return true;
    }
};
class UserAuthenticator {
private:
    map<string, string> users;
    map<string, string> userRoles;

public:
    UserAuthenticator() {
        users["admin"] = "admin123";
        users["user1"] = "password1";
        users["user2"] = "password2";
        userRoles["admin"] = "admin";
        userRoles["user1"] = "user";
        userRoles["user2"] = "user";
    }

    bool authenticateUser(const string& username, const string& password) {
        auto it = users.find(username);
        if (it != users.end() && it->second == password) {
            cout << "User authenticated successfully!" << endl;
            return true;
        }
        cout << "Invalid username or password." << endl;
        return false;
    }

    string authorizeUser(const string& username) {
        auto it = userRoles.find(username);
        if (it != userRoles.end()) {
            return it->second;
        }
        return "";
    }

    void addUser(const string& username, const string& password, const string& role) {
        users[username] = password;
        userRoles[username] = role;
        cout << "User added successfully!" << endl;
    }
};
class OnlineTicketingSystem {
private:
    vector<Ticket> tickets;

public:
    void generateTicket(string name, string date, string location, string type, int qty, double price) {
        Ticket newTicket(name, date, location, type, qty, price);
        tickets.push_back(newTicket);
        cout << "Ticket generated successfully!" << endl;
    }

    void displayAllTickets() const {
        if (tickets.empty()) {
            cout << "No tickets generated yet." << endl;
            return;
        }

        cout << "Generated Tickets:" << endl;
        for (const Ticket& ticket : tickets) {
            ticket.displayTicketDetails();
            cout << endl;
        }
    }
};
class EventScheduler {
private:
    vector<Event> scheduledEvents;

public:
    void scheduleEvent(const Event& event) {
        scheduledEvents.push_back(event);
        cout << "Event scheduled successfully!" << endl;
    }

    void displayScheduledEvents() const {
        if (scheduledEvents.empty()) {
            cout << "No events scheduled yet." << endl;
            return;
        }

        cout << "Scheduled Events:" << endl;
        for (const Event& event : scheduledEvents) {
            event.display();
            cout << endl;
        }
    }
};
class Venue {
private:
    string name;
    string location;
    string facilities;

public:
    Venue(string n, string loc, string fac) : name(n), location(loc), facilities(fac) {}

    void displayVenueDetails() const {
        cout << "Venue Name: " << name << endl;
        cout << "Location: " << location << endl;
        cout << "Facilities: " << facilities << endl;
    }
};

class VenueManager {
private:
    vector<Venue> venues;

public:
    void addVenue(const string& name, const string& location, const string& facilities) {
        venues.push_back(Venue(name, location, facilities));
        cout << "Venue added successfully!" << endl;
    }

    void displayAllVenues() const {
        if (venues.empty()) {
            cout << "No venues available yet." << endl;
            return;
        }

        cout << "Available Venues:" << endl;
        for (const Venue& venue : venues) {
            venue.displayVenueDetails();
            cout << endl;
        }
    }
};
class Speaker {
private:
    string name;
    string topic;

public:
    Speaker(string n, string t) : name(n), topic(t) {}

    void displaySpeakerDetails() const {
        cout << "Speaker Name: " << name << endl;
        cout << "Topic: " << topic << endl;
    }
};
class SpeakerManager {
private:
    vector<Speaker> speakers;

public:
    void addSpeaker(const string& name, const string& topic) {
        speakers.push_back(Speaker(name, topic));
        cout << "Speaker added successfully!" << endl;
    }

    void displayAllSpeakers() const {
        if (speakers.empty()) {
            cout << "No speakers available yet." << endl;
            return;
        }

        cout << "Available Speakers:" << endl;
        for (const Speaker& speaker : speakers) {
            speaker.displaySpeakerDetails();
            cout << endl;
        }
    }
};

class FeedbackSurvey {
private:
    map<string, int> eventFeedbacks; // Event name -> rating

public:
    void addFeedback(const string& eventName, int rating) {
        eventFeedbacks[eventName] = rating;
    }

    void displayAllFeedbacks() const {
        if (eventFeedbacks.empty()) {
            cout << "No feedback available yet." << endl;
            return;
        }

        cout << "Feedbacks:" << endl;
        for (const auto& feedback : eventFeedbacks) {
            cout << "Event: " << feedback.first << ", Rating: " << feedback.second << endl;
        }
    }
};
